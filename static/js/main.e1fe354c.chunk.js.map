{"version":3,"sources":["components/EditableRow.jsx","components/ToDoItem.jsx","components/useLocalStorage.jsx","components/App.jsx","index.js"],"names":["EditableRow","props","className","type","onChange","e","setEditingText","target","value","editingText","id","onClick","onSaveEdited","onCancelEdit","ToDoItem","useState","isMarked","setIsMarked","prevValue","style","textDecoration","text","onEdit","onDelete","useLocalStorage","key","initialValue","window","item","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","App","inputText","setInputText","items","setItems","todoEditing","setTodoEditing","countCreated","setCountCreated","countEdited","setCountEdited","countDeleted","setCountDeleted","addItem","prevItems","newTodo","unshift","uuidv4","deleteItem","filter","handleEdit","handleCancelClick","handleSaveEdited","editArr","editTodo","length","event","newValue","onKeyDown","handleKeyDown","preventDefault","fetch","then","response","json","data","map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1fe354c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction EditableRow(props) {\r\n  return (\r\n    <div className=\"form\">\r\n      <input\r\n        type=\"text\"\r\n        onChange={(e) => props.setEditingText(e.target.value)}\r\n        value={props.editingText}\r\n        id={props.id}\r\n      />\r\n      <button className=\"btn\" onClick={() => props.onSaveEdited(props.id)}>\r\n        Save\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn\"\r\n        onClick={() => props.onCancelEdit(props.id)}\r\n      >\r\n        Cancel\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditableRow;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction ToDoItem(props) {\r\n  const [isMarked, setIsMarked] = useState(false);\r\n\r\n  function handleMark(props) {\r\n    setIsMarked((prevValue) => {\r\n      return !prevValue;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <li\r\n        onClick={handleMark}\r\n        style={{ textDecoration: isMarked ? \"line-through\" : \"none\" }}\r\n      >\r\n        {props.text}{\" \"}\r\n        <button\r\n          className=\"btn\"\r\n          onClick={() => {\r\n            props.onEdit(props.id, props.text);\r\n          }}\r\n        >\r\n          Edit\r\n        </button>{\" \"}\r\n        <button\r\n          className=\"btn\"\r\n          onClick={() => {\r\n            props.onDelete(props.id);\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoItem;\r\n","import { useState } from \"react\";\r\n\r\n// Hook\r\nfunction useLocalStorage(key, initialValue) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    if (typeof window === \"undefined\") {\r\n      return initialValue;\r\n    }\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      if (typeof window !== \"undefined\") {\r\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n      }\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n  return [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;\r\n","import React, { useState } from \"react\";\r\nimport EditableRow from \"./EditableRow\";\r\nimport ToDoItem from \"./ToDoItem\";\r\nimport useLocalStorage from \"./useLocalStorage\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction App() {\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [items, setItems] = useLocalStorage(\"items\", []);\r\n\r\n  const [todoEditing, setTodoEditing] = useState(null);\r\n  const [editingText, setEditingText] = useState(\"\");\r\n\r\n  const [countCreated, setCountCreated] = useLocalStorage(\"countCreated\", 0);\r\n  const [countEdited, setCountEdited] = useLocalStorage(\"countEdited\", 0);\r\n  const [countDeleted, setCountDeleted] = useLocalStorage(\"countDeleted\", 0);\r\n\r\n  const fetchData = (e) => {\r\n    e.preventDefault();\r\n    let url =\r\n      \"https://gist.githubusercontent.com/alexandrtovmach/0c8a29b734075864727228c559fe9f96/raw/c4e4133c9658af4c4b3474475273b23b4a70b4af/todo-task.json\";\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setItems([\r\n          ...items,\r\n          ...data.map((item) => {\r\n            return {\r\n              text: item.text,\r\n              id: uuidv4(),\r\n            };\r\n          }),\r\n        ]);\r\n      });\r\n  };\r\n\r\n  function handleChange(event) {\r\n    const newValue = event.target.value;\r\n    setInputText(newValue);\r\n  }\r\n\r\n  function addItem() {\r\n    setItems((prevItems) => {\r\n      const newTodo = [...prevItems];\r\n      newTodo.unshift({ id: uuidv4(), text: inputText });\r\n      return newTodo;\r\n    });\r\n\r\n    setInputText(\"\");\r\n    setCountCreated(countCreated + 1);\r\n  }\r\n\r\n  function deleteItem(id) {\r\n    setItems((prevItems) => {\r\n      const updatedItems = prevItems.filter((item) => item.id !== id);\r\n      return updatedItems;\r\n    });\r\n\r\n    setCountDeleted(countDeleted + 1);\r\n  }\r\n\r\n  function handleKeyDown(event) {\r\n    if (event.key === \"Enter\") {\r\n      addItem();\r\n    }\r\n    return <input type=\"text\" onKeyDown={handleKeyDown} />;\r\n  }\r\n\r\n  function handleEdit(id, text) {\r\n    setTodoEditing(id);\r\n    setEditingText(text);\r\n  }\r\n\r\n  function handleCancelClick() {\r\n    setTodoEditing(null);\r\n  }\r\n\r\n  function handleSaveEdited(id) {\r\n    const editArr = (prevItems) => {\r\n      const updatedItems = prevItems.filter((item) => item.id !== id);\r\n      return updatedItems;\r\n    };\r\n    setItems(editArr);\r\n\r\n    setItems((editArr) => {\r\n      const editTodo = [...editArr];\r\n      editTodo.unshift({ id: uuidv4(), text: editingText });\r\n      return editTodo;\r\n    });\r\n\r\n    setTodoEditing(null);\r\n    setCountEdited(countEdited + 1);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"heading\">\r\n        <h1>To-Do List with {items.length} tasks</h1>\r\n      </div>\r\n      <p>{countCreated} ToDoes are created</p>\r\n      <p>{countEdited} ToDoes are updated</p>\r\n      <p>{countDeleted} ToDoes are deleted</p>\r\n      <div className=\"form\">\r\n        <input\r\n          onChange={handleChange}\r\n          onKeyDown={handleKeyDown}\r\n          type=\"text\"\r\n          value={inputText}\r\n        />\r\n        <button onClick={addItem}>\r\n          <span>Add</span>\r\n        </button>\r\n        <button onClick={fetchData}>\r\n          <span>Get TodoList from outside data</span>\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <form>\r\n          <ul>\r\n            {items.map((item) =>\r\n              todoEditing === item.id ? (\r\n                <EditableRow\r\n                  key={item.id}\r\n                  id={item.id}\r\n                  onCancelEdit={handleCancelClick}\r\n                  onSaveEdited={handleSaveEdited}\r\n                  editingText={editingText}\r\n                  setEditingText={setEditingText}\r\n                />\r\n              ) : (\r\n                <ToDoItem\r\n                  key={item.id}\r\n                  id={item.id}\r\n                  text={item.text}\r\n                  onDelete={deleteItem}\r\n                  onEdit={handleEdit}\r\n                />\r\n              )\r\n            )}\r\n          </ul>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}